{"version":3,"sources":["App.js","abi/abis.js","reportWebVitals.js","index.js"],"names":["web3","greeterAbi","inputs","internalType","name","type","stateMutability","outputs","contractAddr","App","useState","greet","setGreet","Web3","window","ethereum","autoRefreshOnNetworkChange","greeterContract","eth","Contract","handleSet","e","a","preventDefault","request","method","queryAccounts","console","log","length","account","alert","methods","setGreeting","estimateGas","gas","send","from","result","status","handleGet","call","className","onClick","onSubmit","htmlFor","id","value","required","title","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yYAKIA,E,yGCLSC,EAAa,CACxB,CACEC,OAAQ,CACN,CACEC,aAAc,SACdC,KAAM,YACNC,KAAM,WAGVC,gBAAiB,aACjBD,KAAM,eAER,CACEH,OAAQ,GACRE,KAAM,QACNG,QAAS,CACP,CACEJ,aAAc,SACdC,KAAM,GACNC,KAAM,WAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEC,aAAc,SACdC,KAAM,YACNC,KAAM,WAGVD,KAAM,cACNG,QAAS,GACTD,gBAAiB,aACjBD,KAAM,aD9BJG,G,OAAe,8CAuENC,MArEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAEbZ,EAAO,IAAIa,IAAKC,OAAOC,UACvBD,OAAOC,SAASC,4BAA6B,EAC7C,IAAMC,EAAkB,IAAIjB,EAAKkB,IAAIC,SAASlB,EAAYO,GAEpDY,EAAS,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAChBD,EAAEE,iBADc,SAGYT,OAAOC,SAASS,QAAQ,CAAEC,OAAQ,wBAH9C,UAGVC,EAHU,OAIhBC,QAAQC,IAAI,YAAaF,KAErBA,EAAcG,OAAS,GANX,gBAOdC,EAAUJ,EAAc,GAPV,8BASdK,MAAM,yDATQ,mBAUP,GAVO,yBAYEd,EAAgBe,QAAQC,YAAYtB,GAAOuB,cAZ7C,eAYVC,EAZU,iBAaKlB,EAAgBe,QAAQC,YAAYtB,GAAOyB,KAAK,CAAEC,KAAMP,EAASK,QAbtE,QAaVG,EAbU,OAchBX,QAAQC,IAAIU,GACRA,EAAOC,QACTR,MAAM,uDAhBQ,4CAAH,sDAoBTS,EAAS,uCAAG,WAAOnB,GAAP,eAAAC,EAAA,6DAChBD,EAAEE,iBADc,SAEKN,EAAgBe,QAAQrB,QAAQ8B,OAFrC,OAEVH,EAFU,OAGhB1B,EAAS0B,GAHO,2CAAH,sDAMf,OACE,qBAAKI,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wBAAQC,QAASH,EAAWnC,KAAK,SAAjC,mCAGA,mCAAMM,EAAN,OACA,uBACA,uBACA,uBACA,uBAAMiC,SAAUxB,EAAhB,UACE,uBAAOyB,QAAQ,WAAWH,UAAU,WAApC,+BADF,OAKE,uBACErC,KAAK,OACLD,KAAK,WACL0C,GAAG,WACHJ,UAAU,eACVK,MAAOpC,EACPqC,SAAS,WACTC,MAAM,GACNC,SAAU,SAAC7B,GAAD,OAAOT,EAASS,EAAE8B,OAAOJ,UAErC,uBACA,uBACA,uBAAO1C,KAAK,SAAS0C,MAAM,gCAE7B,8BACE,4DAA+BvC,aE1D1B4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,EAAgBzB,QAAQC,O","file":"static/js/main.f68ec644.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { greeterAbi } from \"./abi/abis\";\nimport \"./App.css\";\n\nvar web3;\nconst contractAddr = \"0xa4cC4C8d8f6bAeEEE6284326292B5314bDe8FF55\";\n\nfunction App() {\n  const [greet, setGreet] = useState(\"\");\n  web3 = new Web3(window.ethereum);\n  window.ethereum.autoRefreshOnNetworkChange = false;\n  const greeterContract = new web3.eth.Contract(greeterAbi, contractAddr);\n\n  const handleSet = async (e) => {\n    e.preventDefault();\n\n    const queryAccounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n    console.log(\"handleSet\", queryAccounts);\n    let account;\n    if (queryAccounts.length > 0) {\n      account = queryAccounts[0];\n    } else {\n      alert(\"é preciso liberar acesso do metamask a essa pagina\");\n      return false;\n    }\n    const gas = await greeterContract.methods.setGreeting(greet).estimateGas();\n    const result = await greeterContract.methods.setGreeting(greet).send({ from: account, gas });\n    console.log(result);\n    if (result.status) {\n      alert(\"Nova saudação salva no Blockchain com sucesso\");\n    }\n  };\n\n  const handleGet = async (e) => {\n    e.preventDefault();\n    const result = await greeterContract.methods.greet().call();\n    setGreet(result);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={handleGet} type=\"button\">\n          Show current greeting\n        </button>\n        <h1> {greet} </h1>\n        <br />\n        <hr />\n        <br />\n        <form onSubmit={handleSet}>\n          <label htmlFor=\"greeting\" className=\"col-sm-2\">\n            Set new greeting:\n          </label>\n          &nbsp;\n          <input\n            type=\"text\"\n            name=\"greeting\"\n            id=\"greeting\"\n            className=\"form-control\"\n            value={greet}\n            required=\"required\"\n            title=\"\"\n            onChange={(e) => setGreet(e.target.value)}\n          />\n          <br />\n          <br />\n          <input type=\"submit\" value=\"Save into Smart Contract\" />\n        </form>\n        <div>\n          <h5>The Smart Contract is at: {contractAddr}</h5>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const greeterAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"_greeting\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"greet\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"_greeting\",\n        type: \"string\",\n      },\n    ],\n    name: \"setGreeting\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}